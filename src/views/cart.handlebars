
  <h1>{{title}}</h1>

{{#if products.length}}
<table class="table table-dark table-striped">
  <thead>
    <tr>
      <th scope="col">Product</th>
      <th scope="col">Description</th>
      <th scope="col">Price</th>
      <th scope="col">Quantity</th>
      <th scope="col">Eliminar Producto</th>
    </tr>
  </thead>
  {{#each products}}
  <tbody>
    <tr>
      <th scope="row">{{this.product.title}}</th>
      <td>{{this.product.description}}</td>
      <td>{{this.product.price}}</td>
      <td>{{this.quantity}}</td>
      <td>                              
        <button
          type='button'
          class='btn btn-primary delete-of-cart-btn'
          data-productid='{{this.product._id}}'
        >Eliminar</button>
      </td>
    </tr>
  </tbody>
{{/each}}
</table>
{{/if}}

<div class="fs-1">Total: $<span id="total-amount-value"></span></div>
<br>

 <button
            type='button'
            class='btn btn-primary'
            onclick="window.location.href='/products/'"
        >Volver a productos</button>
 <button
            type='button'
            class='btn btn-primary'
            id="endPurchaseButton"
        >Finalizar compra</button>


  </div>
</div>
<script
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
  crossorigin="anonymous"
></script>

<script src='https://cdn.jsdelivr.net/npm/sweetalert2@11'></script>

<script>
  function updateTotalAmount() {
    const totalAmount = Array.from(document.querySelectorAll('.delete-of-cart-btn'))
      .map(button => {
        const quantity = parseInt(button.parentElement.parentElement.querySelector('td:nth-child(4)').textContent);
        const price = parseFloat(button.parentElement.parentElement.querySelector('td:nth-child(3)').textContent);
        return quantity * price;
      })
      .reduce((total, subtotal) => total + subtotal, 0);

    const totalAmountElement = document.getElementById('total-amount-value');
    totalAmountElement.textContent = totalAmount.toFixed(2);
  }
    window.addEventListener('load', () => { 
      console.log('pagina cargada')
      updateTotalAmount()
        const deleteToCartButtons = document.querySelectorAll('.delete-of-cart-btn');
            deleteToCartButtons.forEach(button => { 
                button.addEventListener('click', async () => { 
                    const currentLocationOrigin = window.location.origin
                    const productId = button.getAttribute('data-productid'); 
                    console.log(productId)
                    const cartId = '{{cart}}' 
                    console.log(cartId)
                try { const url =`${currentLocationOrigin}/api/carts/${cartId}/products/${productId}` 
                    const response = await fetch(url, { method: 'DELETE' }) 
                    if (response.ok) {
                          console.log('Producto eliminado del carrito con éxito') 
                          Swal.fire({ 
                            icon:'success', 
                            title: 'Producto eliminado del carrito con éxito',
                            timer: 2000, 
                            showConfirmButton: false})
                          setTimeout(() => {
                            window.location.href ='/cart/{{cart}}/'
                          }, 2000);
                    } else {
                            const responseData = await response.json();
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: responseData.message,
                            });
                    }
                } catch (error) {
                    console.error('Error en la solicitud:', error); } 
                    }); 
                }); 
       const endPurchaseButton = document.getElementById('endPurchaseButton');
        endPurchaseButton.addEventListener('click', async () => {
          const currentLocationOrigin = window.location.origin
          const cartId = '{{cart}}' 
          const url = `${currentLocationOrigin}/api/carts/${cartId}/purchase`;

      try {
        const response = await fetch(url, {
          method: 'POST',
        });
         if (response.status===200) {
            Swal.fire({ 
              icon:'success', 
              title: 'La compra fue finalizada con éxito, enviamos un email de confirmación a tu casilla',
              timer: 2000, 
              showConfirmButton: false})
            setTimeout(() => {
              window.location.href ='/cart/{{cart}}/'
            }, 2000);
         } else {
              const responseData = await response.json();
                Swal.fire({
                          icon: 'error',
                          title: 'Error',
                          text: responseData.message,
                          timer: 2000, 
                          showConfirmButton: false});
         }    
          
      } catch (error) {
        console.error('Error en la solicitud:', error);
      }
    });
            });
</script>